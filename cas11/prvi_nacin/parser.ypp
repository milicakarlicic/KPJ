
%{

#include <iostream>
#include <cstdlib>
#include <map>
#include <vector>
#include "funkcije.hpp"

using namespace std;

void yyerror(const string& poruka) {
    cerr << poruka << endl;
    exit(EXIT_FAILURE);
}

extern int yylex();

map<char, Funkcija*> mapa;

%}

%union {
    double d;
    char c;
    vector<char>* v1;
    vector<double>* v2;
    Izraz* i;
}

%token function sin_token cos_token
%token <c> id_fje id
%token <d> broj

%type <i> E
%type <v1> NIZ_ARG
%type <v2> NIZ_BROJEVA

%left '+'
%left '*'

%%

NIZ_NAREDBI: NIZ_NAREDBI NAREDBA '\n'
| NAREDBA '\n'
;

NAREDBA: function id_fje '(' NIZ_ARG ')' '=' '"' E '"' {
    Funkcija* pom = new Funkcija(*$4, $8);

    auto it = mapa.find($2);
    if (it != mapa.end()) {
        delete it->second;
    }

    if(pom->Provera())
        mapa[$2] = pom;
    else {
        cerr << "Pogresno zadata funkcija." << endl;
        delete pom;
    }

    delete $4;
}
| id_fje {
    auto it = mapa.find($1);
    if(it == mapa.end())
        cerr << "Funkcija nije definisana" << endl;

    it->second->Ispis();
}
| id_fje '[' NIZ_BROJEVA ']' {
    auto it = mapa.find($1);
    if(it == mapa.end())
        cerr << "Funkcija nije definisana" << endl;
    try {
        cout << (*it->second)[*$3] << endl;
    } catch(const char* poruka) {
        cerr << poruka << endl;
    }

    delete $3;
}
| id_fje '\'' id {
    auto it = mapa.find($1);
    if(it == mapa.end())
        cerr << "Funkcija nije definisana" << endl;

    Funkcija* pom = it->second->Izvod($3);
    pom->Ispis();
    delete pom;
}
|
;

NIZ_BROJEVA: NIZ_BROJEVA ',' broj {
    $$->push_back($3);
}
| broj {
    $$ = new vector<double>();
    $$->push_back($1);
}
;

NIZ_ARG: NIZ_ARG ',' id {
    $$ = $1;
    $$->push_back($3);
}
| id {
    $$ = new vector<char>();
    $$->push_back($1);
}
;

E: E '+' E {
    $$ = new Zbir($1, $3);
}
| E '*' E {
    $$ = new Proizvod($1, $3);
}
| sin_token '(' E ')' {
    $$ = new Sinus($3);
}
| cos_token '(' E ')' {
    $$ = new Kosinus($3);
}
| broj {
    $$ = new Konstanta($1);
}
| id {
    $$ = new Promenljiva($1);
}
;

%%

int main() {
    yyparse();

    for(auto& pom : mapa)
        delete pom.second;

    return 0;
}
