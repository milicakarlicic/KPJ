
%{

#include <iostream>
#include <cstdlib>
#include <vector>
#include <map>
#include "polinomi.hpp"

using namespace std;

void yyerror(const string &poruka) {
    cerr << "Sintaksna greska: " << poruka << endl;
    exit(EXIT_FAILURE);
}

extern int yylex();

map<string, Polinom*> mapa;

%}

%union {
    string *s;
    vector<double> *v;
    Polinom *p;
    double d;
}

%token <s> id
%token <d> broj
%token op_dodele

%type <p> E
%type <v> NIZ_BROJEVA

%left '+' '-'
%left '*'
%right UN_MINUS

%%

NIZ_NAREDBI: NIZ_NAREDBI NAREDBA '\n'
| NAREDBA '\n'
;

NAREDBA: E {
    $1->Ispisi();
    delete $1;
}
| id op_dodele E {
	// BITNO! Ukoliko u mapi cuvamo pokazivace i pokusamo da dodamo
	// novi element, neophodno je provjeriti da li kljuc vec postoji u mapi
	// i ako postoji treba obrisati tekuci pokazivac prije nego sto ga prepisemo
	if (mapa.find(*$1) != mapa.end()) {
		delete mapa[*$1];
	}
    mapa[*$1] = $3;
    delete $1;
}
|
;

E: E '+' E {
    $$ = new Polinom(*$1 + *$3);
    delete $1;
    delete $3;
}
| E '-' E {
    $$ = new Polinom(*$1 - *$3);
    delete $1;
    delete $3;
}
| E '*' E {
    $$ = new Polinom(*$1 * (*$3));
    delete $1;
    delete $3;
}
| '-' E %prec UN_MINUS {
    $$ = new Polinom(-(*$2));
    delete $2;
}
| '(' E ')' {
    $$ = $2;
}
| id {
    auto it = mapa.find(*$1);
    delete $1;

    if (it == mapa.end()) {
        yyerror("Promenljiva nije def");
    }

	// ovde pravimo kopiju polinoma iz mape pa je brisanje atributa izraza u ostalim pravilima bezbjedno
    $$ = new Polinom(*it->second);
}
| '<' NIZ_BROJEVA '>' {
    $$ = new Polinom(*$2, $2->size() - 1);
    delete $2;
}
;

NIZ_BROJEVA: NIZ_BROJEVA ',' broj {
    $$ = $1;
    $$->push_back($3);
}
| broj {
    $$ = new vector<double>();
    $$->push_back($1);
}
;

%%

int main() {
    yyparse();

	// na kraju programa neophodno je osloboditi memoriju koja se cuva preko pokazivaca iz mape
    for (auto element : mapa) {
        delete element.second;
    }

    return 0;
}
