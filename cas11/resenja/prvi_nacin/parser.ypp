
%{

#include <iostream>
#include <cstdlib>
#include <vector>
#include <map>
#include "polinomi.hpp"

using namespace std;

extern int yylex();

void yyerror(const string &poruka) {
    cerr << "Sintaksna greska: " << poruka << endl;
    exit(EXIT_FAILURE);
}

map<string, Polinom> mapa; 

%}

%union {
    vector<double> *v;
    string *s;
    Polinom *p;
    double d;
}

%token <s> id
%token <d> broj
%token op_dodele

%type <p> E
%type <v> NIZ_BROJEVA

%left '+' '-'
%left '*'
%right UN_MINUS

%%

NIZ_NAREDBI: NIZ_NAREDBI NAREDBA '\n'
| NAREDBA '\n'
;

NAREDBA: E {
    cout << *$1;
    delete $1;
}
| id op_dodele E {
	// Mapa preslikava stringove u Polinome a kako su atributi na klasne tipove pokazivaci,
	// to je neophodno dereferenciranje
	
	// U C++ postoje podrazumijevani destruktor, konstruktor kopije i operator = (tj. operator dodjele)
	// Podrazumijevane implementacije su nam dovoljne u svim slucajevim osim ukoliko klasa sadrzi pokazivacka polja
	// U tom slucaju destruktor ce obrisati samo adresu (ne i objekat), konstruktor kopije ce kopirati adresu (ne i objekat)
	// i operator = ce prepisati adresu (ne i objekat)
	// U ovom zadatku je OK koristiti podrazumijevane implementacije zbog nacina na koji je definisana klasa za rad sa polinomima
    mapa[*$1] = *$3;
    
    // U mapi se pravi kopija stringa koji predstavlja kljuc i kopija polinoma koji predstavlja vrijednost (preko podrazumijevanog operatora dodjele)
    // i zato je bezbjedno brisati atribute
    delete $1;
    delete $3;
}
|
;

E: E '+' E {
	// Koristimo podrazumijevani konstruktor kopije koji nam je dovoljan!
    $$ = new Polinom(*$1 + *$3);
    // Polinome na koje pokazuju atributi $1 i $3 smo iskoristili za racunanje zbira i oni nam vise 
    // nisu potrebni pa ih mozemo obrisati
    delete $1;
    delete $3;
}
| E '-' E {
    $$ = new Polinom(*$1 - *$3);
    delete $1;
    delete $3;
}
| E '*' E {
    $$ = new Polinom(*$1 * *$3);
    delete $1;
    delete $3;
}
| '-' E %prec UN_MINUS {
    $$ = new Polinom(-(*$2));
    delete $2;
}
| '(' E ')' {
    $$ = $2;
}
| '<' NIZ_BROJEVA '>' {
    $$ = new Polinom(*$2, $2->size() - 1);
    // U konstruktoru polinoma kopirali vektor preko konstruktora kopije tako da je bezbjedno obrisati ga
    delete $2;
}
| id {
    auto it = mapa.find(*$1);
    delete $1;

    if (it == mapa.end()) {
        yyerror("promenljiva nije def");
    }

    $$ = new Polinom(it->second);
}
;

NIZ_BROJEVA: NIZ_BROJEVA ',' broj {
	// Rekurzija koju koristimo utice na definisanje sintaksnih akcija
    $$ = $1;
    $$->push_back($3);
}
| broj {
	// Napisati izvodjenje recenice broj, broj, broj i iz toga ce biti jasno zasto kada udjemo
	// u ovo pravilo pravimo novi niz i dodajemo broj na pocetak tog niza
    $$ = new vector<double>();
    $$->push_back($1);
}
;

%%

int main() {
    yyparse();

    return 0;
}
